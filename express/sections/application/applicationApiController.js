const Application = require("../../models/Application");
const {
  sendApplicationStatusUpdate,
  notifyNewApplication,
  sendDeliteApplication,
} = require("../../socketHandler");
const User = require("../../models/User");
const {
  sendApplicationMessage,
  editApplicationMessage,
  deliteApplicationMessage,
} = require("../../utils/telegramUtils");

const telegramBot = require("../../telegramBot");
const updateUserRating = require("../../utils/updateUserRating");
const {
  applicationWithPartner,
} = require("../../utils/applicationWithPartner");

const { validationResult } = require("express-validator");
const ApplicationStatus = {
  NEW: "NEW",
  PENDING: "PENDING",
  COMPLETED: "COMPLETED",
  CONFIRMATION: "CONFIRMATION",
};

class applicationApiController {
  async createApplication(req, res) {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ message: "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", errors });
      }
      const {
        quantity,
        currency,
        forPayment,
        paymentMethod,
        offerId,
        price,
        seller,
      } = req.body;
      const { id, name } = req.user;
      // console.log(444, req.user);
      const buyerUser = await User.findOne({ _id: id });
      const newApplication = {
        quantity,
        user: id,
        username: buyerUser.username,
        offerId,
        createdAt: Date.now(),
        currency,
        forPayment,
        paymentMethod,
        price,
        seller,
        status: ApplicationStatus.NEW,
      };

      const application = new Application(newApplication);
      await application.save();
      const sellerUser = await User.findOne({ _id: seller });
      const updatedApplication = await applicationWithPartner(application);
      notifyNewApplication(application);

      await sendApplicationMessage(
        telegramBot,
        application,
        sellerUser,
        buyerUser
      );

      res.json(updatedApplication);
    } catch (e) {
      console.log(e);
      res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }
  async getMyApplications(req, res) {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ message: "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", errors });
      }

      const { id } = req.user;

      const user = await User.findOne({ _id: id });
      if (!user) {
        return res.status(400).json({ message: "–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", errors });
      }
      const applications = await Application.find({
        $or: [{ user: id }, { seller: id }],
      });
      const applicationsWithPartner = await Promise.all(
        applications.map(async (application) => {
          return await applicationWithPartner(application, id);
        })
      );
      const statusOrder = {
        NEW: 1,
        PENDING: 2,
        CONFIRMATION: 3,
        COMPLETED: 4,
      };

      applicationsWithPartner.sort((a, b) => {
        return statusOrder[a.status] - statusOrder[b.status];
      });
      res.json(applicationsWithPartner);
    } catch (e) {
      console.log(e);
      res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }
  acceptApplication = async (req, res) => {
    const { applicationId } = req.body;
    const userId = req.user.id;

    try {
      const application = await Application.findById(applicationId);
      if (!application) {
        return res.status(400).json({ message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —è–≤–ª—è–µ—Ç—Å—è NEW
      if (application.status !== "NEW") {
        return res.status(400).json({ message: "–ó–∞—è–≤–∫–∞ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ NEW" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–¥–∞–≤—Ü–æ–º –≤ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ
      if (application.seller !== userId) {
        return res
          .status(403)
          .json({ message: "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º —ç—Ç–æ–π –∑–∞—è–≤–∫–∏" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ PENDING
      application.status = "PENDING";
      await application.save();

      sendApplicationStatusUpdate(application);

      const buyerUser = await User.findOne({ _id: application.user });
      const sellerUser = await User.findOne({ _id: application.seller });

      await editApplicationMessage(
        telegramBot,
        application,
        buyerUser,
        sellerUser
      );

      res.status(200).json({ message: "accepted" });
    } catch (e) {
      console.log(e);
      res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  };
  completeApplication = async (req, res) => {
    try {
      const { applicationId, rating } = req.body;
      const userId = req.user.id;

      const application = await Application.findById(applicationId);
      if (!application) {
        return res.status(400).json({ message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
      if (application.status === "COMPLETED") {
        return res.status(400).json({ message: "–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" });
      }

      if (application.status === "PENDING") {
        if (application.user === userId) {
          application.rating.buyer = rating;
          application.status = "CONFIRMATION";
        } else if (application.seller === userId) {
          application.rating.seller = rating;
          application.status = "CONFIRMATION";
        } else {
          return res
            .status(403)
            .json({ message: "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∑–∞—è–≤–∫–∏" });
        }
      } else if (application.status === "CONFIRMATION") {
        if (application.user === userId) {
          application.rating.buyer = rating;
          application.status = "COMPLETED";
        } else if (application.seller === userId) {
          application.rating.seller = rating;
          application.status = "COMPLETED";
        } else {
          return res
            .status(403)
            .json({ message: "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∑–∞—è–≤–∫–∏" });
        }
      }
      if (req.user.isSuspicious) {
        application.isExcludedFromRating = true;
      }

      await application.save();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–∞
      if (!application.isExcludedFromRating) {
        if (application.status === "COMPLETED") {
          if (application.rating.buyer) {
            await updateUserRating(
              application.seller,
              application.rating.buyer
            );
          }
          if (application.rating.seller) {
            await updateUserRating(application.user, application.rating.seller);
          }
        }
      }
      const sellerUser = await User.findOne({
        _id:
          application.user === userId ? application.seller : application.user,
      });
      const message =
        application.status === "CONFIRMATION"
          ? `${
              application.user === userId ? "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å" : "–ü—Ä–æ–¥–∞–≤–µ—Ü"
            } –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–¥–µ–ª–∫—É! –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –∏ –≤—ã üòä`
          : application.status === "COMPLETED"
          ? `${
              application.user === userId ? "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å" : "–ü—Ä–æ–¥–∞–≤–µ—Ü"
            } –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–¥–µ–ª–∫—É! –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ!`
          : undefined;
      // const applicationWithPartnerData = await applicationWithPartner(
      //   application,
      //   userId
      // );
      sendApplicationStatusUpdate(application);
      message &&
        telegramBot.sendMessage(sellerUser.telegramId, message, {
          // reply_markup: {
          //   inline_keyboard: [
          //     [
          //       {
          //         text: "üëç –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É",
          //         callback_data: `${application._id}`,
          //       },
          //     ],
          //   ],
          // },
        });
      res.status(200).json({ message: "complited" });
    } catch (e) {
      console.log(e);
      res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  };
  deliteApplication = async (req, res) => {
    const { applicationId } = req.body;
    const userId = req.user.id;

    try {
      const application = await Application.findById(applicationId);
      if (!application) {
        return res.status(400).json({ message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏–±–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º, –ª–∏–±–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–º –≤ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ
      if (application.user !== userId && application.seller !== userId) {
        return res
          .status(403)
          .json({ message: "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏" });
      }

      await application.remove();
      sendDeliteApplication(application, applicationId);
      const buyerUser = await User.findOne({ _id: application.user });
      const sellerUser = await User.findOne({ _id: application.seller });
      deliteApplicationMessage(telegramBot, application, buyerUser, sellerUser);

      res.status(200).json({ message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞" });
    } catch (e) {
      console.log(e);
      res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  };
}

module.exports = new applicationApiController();
